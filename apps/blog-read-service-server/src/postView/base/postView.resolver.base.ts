/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PostView } from "./PostView";
import { PostViewCountArgs } from "./PostViewCountArgs";
import { PostViewFindManyArgs } from "./PostViewFindManyArgs";
import { PostViewFindUniqueArgs } from "./PostViewFindUniqueArgs";
import { CreatePostViewArgs } from "./CreatePostViewArgs";
import { UpdatePostViewArgs } from "./UpdatePostViewArgs";
import { DeletePostViewArgs } from "./DeletePostViewArgs";
import { PostViewService } from "../postView.service";
@graphql.Resolver(() => PostView)
export class PostViewResolverBase {
  constructor(protected readonly service: PostViewService) {}

  async _postViewsMeta(
    @graphql.Args() args: PostViewCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PostView])
  async postViews(
    @graphql.Args() args: PostViewFindManyArgs
  ): Promise<PostView[]> {
    return this.service.postViews(args);
  }

  @graphql.Query(() => PostView, { nullable: true })
  async postView(
    @graphql.Args() args: PostViewFindUniqueArgs
  ): Promise<PostView | null> {
    const result = await this.service.postView(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PostView)
  async createPostView(
    @graphql.Args() args: CreatePostViewArgs
  ): Promise<PostView> {
    return await this.service.createPostView({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => PostView)
  async updatePostView(
    @graphql.Args() args: UpdatePostViewArgs
  ): Promise<PostView | null> {
    try {
      return await this.service.updatePostView({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PostView)
  async deletePostView(
    @graphql.Args() args: DeletePostViewArgs
  ): Promise<PostView | null> {
    try {
      return await this.service.deletePostView(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
