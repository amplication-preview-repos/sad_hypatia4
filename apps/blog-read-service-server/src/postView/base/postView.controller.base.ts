/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PostViewService } from "../postView.service";
import { PostViewCreateInput } from "./PostViewCreateInput";
import { PostView } from "./PostView";
import { PostViewFindManyArgs } from "./PostViewFindManyArgs";
import { PostViewWhereUniqueInput } from "./PostViewWhereUniqueInput";
import { PostViewUpdateInput } from "./PostViewUpdateInput";

export class PostViewControllerBase {
  constructor(protected readonly service: PostViewService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PostView })
  async createPostView(
    @common.Body() data: PostViewCreateInput
  ): Promise<PostView> {
    return await this.service.createPostView({
      data: data,
      select: {
        authorName: true,
        content: true,
        createdAt: true,
        id: true,
        publishedDate: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PostView] })
  @ApiNestedQuery(PostViewFindManyArgs)
  async postViews(@common.Req() request: Request): Promise<PostView[]> {
    const args = plainToClass(PostViewFindManyArgs, request.query);
    return this.service.postViews({
      ...args,
      select: {
        authorName: true,
        content: true,
        createdAt: true,
        id: true,
        publishedDate: true,
        title: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PostView })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async postView(
    @common.Param() params: PostViewWhereUniqueInput
  ): Promise<PostView | null> {
    const result = await this.service.postView({
      where: params,
      select: {
        authorName: true,
        content: true,
        createdAt: true,
        id: true,
        publishedDate: true,
        title: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PostView })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePostView(
    @common.Param() params: PostViewWhereUniqueInput,
    @common.Body() data: PostViewUpdateInput
  ): Promise<PostView | null> {
    try {
      return await this.service.updatePostView({
        where: params,
        data: data,
        select: {
          authorName: true,
          content: true,
          createdAt: true,
          id: true,
          publishedDate: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PostView })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePostView(
    @common.Param() params: PostViewWhereUniqueInput
  ): Promise<PostView | null> {
    try {
      return await this.service.deletePostView({
        where: params,
        select: {
          authorName: true,
          content: true,
          createdAt: true,
          id: true,
          publishedDate: true,
          title: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
